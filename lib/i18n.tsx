"use client"

import { createContext, useCallback, useContext, useEffect, useMemo, useState } from "react"

type Locale = "en" | "zh"

type Dictionary = Record<string, string>

const en: Dictionary = {
  nav_markets: "Markets",
  nav_global: "Global",
  nav_leaderboard: "Leaderboard",
  search_placeholder: "Search markets...",
  connect_wallet: "Connect Wallet",
  notifications: "Notifications",
  unread_notifications: "unread notifications",
  mark_all_read: "Mark all as read",
  all_caught_up: "All caught up!",
  no_notifications: "No notifications yet",
  hero_title_prefix: "Great",
  hero_title_highlight: "predictions",
  hero_title_suffix: "live here.",
  cta_create_market: "+ Create Market",
  cta_see_all: "See all markets",
  yes: "YES",
  no: "NO",
  category_meme: "Meme Coin",
  category_solana: "Solana",
  category_pumpfun: "Pump.fun",
  markets_heading: "Markets",
  search_markets: "Search markets...",
  cat_All: "All",
  cat_Trending: "Trending",
  cat_Politics: "Politics",
  cat_Sports: "Sports",
  cat_Crypto: "Crypto",
  cat_Tech: "Tech",
  cat_Culture: "Culture",
  cat_World: "World",
  cat_Economy: "Economy",
  chance: "chance",
  vol_abbrev: "Vol.",
  yes_cap: "Yes",
  no_cap: "No",
  back_to_markets: "Back to Markets",
  ends: "Ends",
  chance_title: "Chance",
  buy: "Buy",
  sell: "Sell",
  order_market: "Market",
  order_limit: "Limit",
  limit_price: "Limit Price",
  shares: "Shares",
  amount: "Amount",
  earn_interest: "Earn 4% Interest",
  odds: "Odds",
  payout_if: "Payout if {outcome}",
  total: "Total",
  to_win: "To Win",
  trade_amount: "Trade ${amount}",
  sign_up_to_trade: "Sign up to trade",
  terms_note: "By trading, you agree to the Terms of Use",
  rules_summary: "Rules summary",
  view_full_rules: "View full rules",
  help_center: "Help center",
  timeline_and_payout: "Timeline and payout",
  market_open: "Market open",
  market_closes: "Market closes",
  projected_payout: "Projected payout",
  global_heading: "Global Markets",
  global_sub: "Real-time prediction markets from Polymarket and other platforms",
  source: "Source:",
  polymarket: "Polymarket",
  trending: "Trending",
  all_time: "All Time",
  filters: "Filters",
  table_market: "MARKET ({count})",
  table_prices: "PRICES ↑",
  table_outcome: "OUTCOME ↑",
  table_volume: "VOLUME ↑",
  table_liquidity: "LIQUIDITY ↑",
  table_end_date: "END DATE ↑",
  load_more: "Load More Markets",
  back_to_global: "Back to Global Markets",
  price_label: "Price:",
  liquidity_label: "Liquidity:",
  volume_label: "Volume:",
  markets_label: "Markets:",
  end_date_label: "End Date:",
  last_update_label: "Last Update:",
  price_chart_title: "Price Chart - EuroBasket Championship Markets",
  tab_information: "Market Information",
  tab_positions: "Positions",
  tab_trades: "Trades",
  tab_news: "News",
  description_label: "Description",
  total_volume: "Total Volume",
  no_positions: "No positions data available",
  no_trades: "No trades data available",
  no_news: "No news available",
  sidebar_markets: "Markets",
  active_markets_count: "{count} active markets",
  vol_short: "Vol:",
  liq_short: "Liq:",
  leaderboard_heading: "Leaderboard",
  updated_every: "Updated every 5 minutes",
  top_performer: "Top Performer",
  highest_volume_stat: "Highest Volume",
  best_win_rate: "Best Win Rate",
  tab_top_pnl: "Top P&L",
  tab_highest_volume: "Highest Volume",
  tab_loserboard: "Loserboard",
  label_pnl: "P&L",
  label_win_rate: "Win Rate",
  label_trades: "Trades",
  label_volume: "Volume",
  label_loss: "Loss",
  rankings_note: "Rankings based on verified trading activity on PredictMarket platform",
  portfolio_heading: "Portfolio",
  connect_twitter: "Connect Twitter",
  connected: "Connected",
  connect_wallet: "Connect Wallet",
  total_balance: "Total Balance",
  total_pnl_label: "Total P&L",
  all_time: "All time",
  win_rate: "Win Rate",
  trades_suffix: "trades",
  active_positions: "Active Positions",
  markets_suffix: "Markets",
  wallet_address: "Wallet Address",
  overview: "Overview",
  assets: "Assets",
  trading_activity: "Trading Activity",
  performance: "Performance",
  recent_activity: "Recent Activity",
  top_assets: "Top Assets",
  filter: "Filter",
  active: "Active",
  won: "Won",
  lost: "Lost",
  pending: "Pending",
  total_volume_label: "Total Volume",
  best_trade: "Best Trade",
  worst_trade: "Worst Trade",
  avg_trade: "Avg Trade",
  // Create Market Page
  create_market_title: "Create Market",
  create_market_subtitle: "Create a new prediction market based on your wallet assets",
  connect_wallet_title: "Connect Your Wallet",
  connect_wallet_subtitle: "You need to connect your wallet to create prediction markets.",
  select_asset_title: "Select Asset/Token",
  select_asset_subtitle: "Choose a memecoin or token from your wallet to create a market about",
  select_token_placeholder: "Select a token from your wallet",
  question_type_title: "Question Type",
  yes_no_name: "Yes/No",
  yes_no_description: "A binary question with two possible outcomes",
  yes_no_example: "Will NASA confirm the discovery of aliens before 2025?",
  multiple_choice_name: "Multiple Choice",
  multiple_choice_description: "A multi-choice question where only one option can be selected",
  multiple_choice_example: "Who will be the next president of the United States?",
  numeric_name: "Numeric",
  numeric_description: "A question asking for a specific number",
  numeric_example: "How many people will come to Taco Tuesday?",
  date_name: "Date",
  date_description: "A question asking when something will happen",
  date_example: "When will OpenAI release GPT-7?",
  market_question_title: "Market Question",
  question_topic_label: "Question/Topic *",
  question_placeholder: "Enter your prediction question",
  market_display_note: "Market will be displayed as: ${asset} - {question}",
  description_label: "Description *",
  description_placeholder: "Provide detailed information about the market conditions, resolution criteria, and any important context...",
  answer_options_label: "Answer Options",
  option_placeholder: "Option {number}",
  remove_option: "Remove",
  add_option: "Add Option",
  minimum_value_label: "Minimum Value",
  maximum_value_label: "Maximum Value",
  unit_label: "Unit (optional)",
  unit_placeholder: "e.g., people, dollars, percentage",
  earliest_date_label: "Earliest Possible Date",
  latest_date_label: "Latest Possible Date",
  select_earliest_date: "Select earliest date",
  select_latest_date: "Select latest date",
  market_closes_label: "Market Closes *",
  select_closing_date: "Select closing date",
  resolution_criteria_title: "Resolution Criteria",
  who_decides_label: "Who decides on the answer?",
  who_decides_text: "You do! As the market creator, you'll resolve the market based on the outcome. Traders are attracted to markets with clear resolution criteria and trustworthy creators.",
  who_weighs_in_label: "Who will weigh in?",
  who_weighs_in_text: "Our thousands of daily, active traders. The traders that have insight into your question will push the probability towards the correct answer.",
  create_market_button: "Create Market",
  market_preview_title: "Market Preview",
  your_question_placeholder: "Your question will appear here",
  description_placeholder: "Market description will appear here",
  closes_label: "Closes:",
  type_label: "Type:",
  date_tbd: "Date TBD",
  answer_options_preview: "Answer Options:",
  numeric_range_preview: "Numeric Range:",
  date_range_preview: "Date Range:",
  earliest_date_tbd: "Earliest date TBD",
  latest_date_tbd: "Latest date TBD",
  tips_for_success_title: "Tips for Success",
  tip_popular_memecoins: "Choose popular memecoins for higher engagement",
  tip_clear_criteria: "Set clear, measurable resolution criteria",
  tip_specific_dates: "Include specific dates and thresholds",
  tip_detailed_descriptions: "Provide detailed market descriptions",
  // API Messages
  creating_market: "Creating market...",
  market_created_success: "Market created successfully!",
  market_creation_failed: "Failed to create market",
  network_error: "Network error. Please check your connection.",
  validation_error: "Please check your input and try again.",
  missing_required_fields: "Please fill in all required fields",
  multiple_choice_min_options: "Multiple choice questions require at least 2 options",
  numeric_requires_range: "Numeric questions require min and max values",
  date_requires_range: "Date questions require earliest and latest dates",
}

const zh: Dictionary = {
  nav_markets: "市场",
  nav_global: "全球",
  nav_leaderboard: "排行榜",
  search_placeholder: "搜索市场…",
  connect_wallet: "连接钱包",
  notifications: "通知",
  unread_notifications: "条未读通知",
  mark_all_read: "全部标为已读",
  all_caught_up: "都看完啦！",
  no_notifications: "暂无通知",
  hero_title_prefix: "精彩",
  hero_title_highlight: "预测",
  hero_title_suffix: "尽在这里。",
  cta_create_market: "+ 创建市场",
  cta_see_all: "查看全部市场",
  yes: "是",
  no: "否",
  category_meme: "梗币",
  category_solana: "Solana",
  category_pumpfun: "Pump.fun",
  markets_heading: "市场",
  search_markets: "搜索市场…",
  cat_All: "全部",
  cat_Trending: "趋势",
  cat_Politics: "政治",
  cat_Sports: "体育",
  cat_Crypto: "加密",
  cat_Tech: "科技",
  cat_Culture: "文化",
  cat_World: "世界",
  cat_Economy: "经济",
  chance: "概率",
  vol_abbrev: "成交量",
  yes_cap: "买入",
  no_cap: "卖出",
  back_to_markets: "返回市场",
  ends: "截止",
  chance_title: "概率",
  buy: "买入",
  sell: "卖出",
  order_market: "市价",
  order_limit: "限价",
  limit_price: "限价",
  shares: "份额",
  amount: "金额",
  earn_interest: "存入享 4% 利息",
  odds: "赔率",
  payout_if: "若 {outcome} 的回报",
  total: "总计",
  to_win: "可赢得",
  trade_amount: "下单 ${amount}",
  sign_up_to_trade: "登录后下单",
  terms_note: "交易即代表同意服务条款",
  rules_summary: "规则概要",
  view_full_rules: "查看完整规则",
  help_center: "帮助中心",
  timeline_and_payout: "时间线与结算",
  market_open: "市场开启",
  market_closes: "市场关闭",
  projected_payout: "预计结算",
  global_heading: "全球市场",
  global_sub: "来自 Polymarket 等平台的实时预测市场",
  source: "来源：",
  polymarket: "Polymarket",
  trending: "趋势",
  all_time: "全部时间",
  filters: "筛选",
  table_market: "市场（{count}）",
  table_prices: "价格 ↑",
  table_outcome: "结果 ↑",
  table_volume: "成交量 ↑",
  table_liquidity: "流动性 ↑",
  table_end_date: "结束日期 ↑",
  load_more: "加载更多市场",
  back_to_global: "返回全球市场",
  price_label: "价格：",
  liquidity_label: "流动性：",
  volume_label: "成交量：",
  markets_label: "市场数：",
  end_date_label: "结束日期：",
  last_update_label: "最近更新：",
  price_chart_title: "价格图 - 欧锦赛相关市场",
  tab_information: "市场信息",
  tab_positions: "持仓",
  tab_trades: "成交",
  tab_news: "新闻",
  description_label: "描述",
  total_volume: "总成交量",
  no_positions: "暂无持仓数据",
  no_trades: "暂无成交数据",
  no_news: "暂无新闻",
  sidebar_markets: "市场",
  active_markets_count: "{count} 个活跃市场",
  vol_short: "量：",
  liq_short: "池：",
  leaderboard_heading: "排行榜",
  updated_every: "每 5 分钟更新",
  top_performer: "最佳表现",
  highest_volume_stat: "最高成交量",
  best_win_rate: "最佳胜率",
  tab_top_pnl: "P&L 排行",
  tab_highest_volume: "成交量排行",
  tab_loserboard: "亏损榜",
  label_pnl: "盈亏",
  label_win_rate: "胜率",
  label_trades: "交易数",
  label_volume: "成交量",
  label_loss: "亏损",
  rankings_note: "根据 PredictMarket 平台的已验证交易活动统计",
  portfolio_heading: "资产组合",
  connect_twitter: "连接 Twitter",
  connected: "已连接",
  connect_wallet: "连接钱包",
  total_balance: "总余额",
  total_pnl_label: "总盈亏",
  all_time: "全部时间",
  win_rate: "胜率",
  trades_suffix: "笔交易",
  active_positions: "持仓数量",
  markets_suffix: "个市场",
  wallet_address: "钱包地址",
  overview: "概览",
  assets: "资产",
  trading_activity: "交易记录",
  performance: "表现",
  recent_activity: "最新活动",
  top_assets: "热门资产",
  filter: "筛选",
  active: "进行中",
  won: "已赢",
  lost: "已亏",
  pending: "待结算",
  total_volume_label: "总成交量",
  best_trade: "最佳交易",
  worst_trade: "最差交易",
  avg_trade: "平均每笔",
  // Create Market Page
  create_market_title: "创建市场",
  create_market_subtitle: "基于您的钱包资产创建新的预测市场",
  connect_wallet_title: "连接您的钱包",
  connect_wallet_subtitle: "您需要连接钱包才能创建预测市场。",
  select_asset_title: "选择资产/代币",
  select_asset_subtitle: "从您的钱包中选择一个梗币或代币来创建相关市场",
  select_token_placeholder: "从您的钱包中选择代币",
  question_type_title: "问题类型",
  yes_no_name: "是/否",
  yes_no_description: "只有两种可能结果的二元问题",
  yes_no_example: "NASA 会在 2025 年前确认发现外星人吗？",
  multiple_choice_name: "多选题",
  multiple_choice_description: "只能选择一个选项的多选题",
  multiple_choice_example: "谁将成为下一任美国总统？",
  numeric_name: "数值",
  numeric_description: "询问具体数字的问题",
  numeric_example: "有多少人会来参加周二塔可节？",
  date_name: "日期",
  date_description: "询问某事何时发生的问题",
  date_example: "OpenAI 何时发布 GPT-7？",
  market_question_title: "市场问题",
  question_topic_label: "问题/主题 *",
  question_placeholder: "输入您的预测问题",
  market_display_note: "市场将显示为：${asset} - {question}",
  description_label: "描述 *",
  description_placeholder: "提供有关市场条件、解决标准和任何重要背景的详细信息...",
  answer_options_label: "答案选项",
  option_placeholder: "选项 {number}",
  remove_option: "删除",
  add_option: "添加选项",
  minimum_value_label: "最小值",
  maximum_value_label: "最大值",
  unit_label: "单位（可选）",
  unit_placeholder: "例如：人、美元、百分比",
  earliest_date_label: "最早可能日期",
  latest_date_label: "最晚可能日期",
  select_earliest_date: "选择最早日期",
  select_latest_date: "选择最晚日期",
  market_closes_label: "市场关闭 *",
  select_closing_date: "选择关闭日期",
  resolution_criteria_title: "解决标准",
  who_decides_label: "谁来决定答案？",
  who_decides_text: "您来决定！作为市场创建者，您将根据结果解决市场。交易者被具有明确解决标准和可信创建者的市场所吸引。",
  who_weighs_in_label: "谁会参与？",
  who_weighs_in_text: "我们数千名日常活跃交易者。对您的问题有洞察力的交易者将推动概率向正确答案靠拢。",
  create_market_button: "创建市场",
  market_preview_title: "市场预览",
  your_question_placeholder: "您的问题将显示在这里",
  description_placeholder: "市场描述将显示在这里",
  closes_label: "关闭：",
  type_label: "类型：",
  date_tbd: "待定日期",
  answer_options_preview: "答案选项：",
  numeric_range_preview: "数值范围：",
  date_range_preview: "日期范围：",
  earliest_date_tbd: "最早日期待定",
  latest_date_tbd: "最晚日期待定",
  tips_for_success_title: "成功秘诀",
  tip_popular_memecoins: "选择流行的梗币以获得更高的参与度",
  tip_clear_criteria: "设定清晰、可衡量的解决标准",
  tip_specific_dates: "包含具体的日期和阈值",
  tip_detailed_descriptions: "提供详细的市场描述",
  // API Messages
  creating_market: "正在创建市场...",
  market_created_success: "市场创建成功！",
  market_creation_failed: "市场创建失败",
  network_error: "网络错误。请检查您的连接。",
  validation_error: "请检查您的输入并重试。",
  missing_required_fields: "请填写所有必填字段",
  multiple_choice_min_options: "多选题需要至少2个选项",
  numeric_requires_range: "数值问题需要最小值和最大值",
  date_requires_range: "日期问题需要最早和最晚日期",
}

const dictionaries: Record<Locale, Dictionary> = { en, zh }

type I18nContextValue = {
  locale: Locale
  t: (key: keyof typeof en, vars?: Record<string, string | number>) => string
  setLocale: (l: Locale) => void
}

const I18nContext = createContext<I18nContextValue | null>(null)

export function I18nProvider({ children, defaultLocale = "en" as Locale }: { children: React.ReactNode; defaultLocale?: Locale }) {
  const [locale, setLocale] = useState<Locale>(() => {
    if (typeof window !== "undefined") {
      const saved = window.localStorage.getItem("locale") as Locale | null
      if (saved === "en" || saved === "zh") return saved
    }
    return defaultLocale
  })

  const t = useCallback(
    (key: keyof typeof en, vars?: Record<string, string | number>) => {
      const dict = dictionaries[locale]
      let str = dict[key] ?? key
      if (vars) {
        for (const k of Object.keys(vars)) {
          str = str.replace(new RegExp(`\\{${k}\\}`, "g"), String(vars[k]))
        }
      }
      return str
    },
    [locale]
  )

  const value = useMemo(() => ({ locale, t, setLocale }), [locale, t])

  useEffect(() => {
    if (typeof window !== "undefined") {
      window.localStorage.setItem("locale", locale)
      document.documentElement.lang = locale
    }
  }, [locale])

  return <I18nContext.Provider value={value}>{children}</I18nContext.Provider>
}

export function useI18n() {
  const ctx = useContext(I18nContext)
  if (ctx) return ctx
  // Graceful fallback if provider is not mounted yet
  const fallbackLocale: Locale = typeof document !== "undefined" && document.documentElement.lang === "zh" ? "zh" : "en"
  const t = (key: keyof typeof en, vars?: Record<string, string | number>) => {
    const dict = dictionaries[fallbackLocale]
    let str = dict[key] ?? (key as string)
    if (vars) {
      for (const k of Object.keys(vars)) {
        str = str.replace(new RegExp(`\\{${k}\\}`, "g"), String(vars[k]))
      }
    }
    return str
  }
  return { locale: fallbackLocale, t, setLocale: () => {} }
}

export type { Locale }


